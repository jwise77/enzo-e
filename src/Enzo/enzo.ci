// See LICENSE_CELLO file for license and copyright information

/// @file     enzo.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-03-24
/// @brief    CHARM++ Enzo process group

module enzo {

  initnode void register_method_turbulence(void);

  readonly EnzoConfig g_enzo_config;
  readonly int EnzoBlock::UseMinimumPressureSupport[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::MinimumPressureSupportParameter[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::MultiSpecies[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::PressureFree[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::Gamma[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::GravitationalConstant[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::ProblemType[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::PPMFlatteningParameter[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::PPMDiffusionParameter[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::PPMSteepeningParameter[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::DualEnergyFormalism[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::DualEnergyFormalismEta1[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::DualEnergyFormalismEta2[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::pressure_floor[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::density_floor[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::number_density_floor[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::temperature_floor[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::InitialRedshift[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::InitialTimeInCodeUnits[CONFIG_NODE_SIZE];
  readonly enzo_float EnzoBlock::DomainLeftEdge [CONFIG_NODE_SIZE_3];
  readonly enzo_float EnzoBlock::DomainRightEdge[CONFIG_NODE_SIZE_3];
  readonly int EnzoBlock::GridRank[CONFIG_NODE_SIZE];
  readonly int EnzoBlock::ghost_depth[CONFIG_NODE_SIZE_3];
  readonly int EnzoBlock::NumberOfBaryonFields[CONFIG_NODE_SIZE];      // active baryon fields

  //==================================================
  // WARNING: Enable the following two lines iff use_grackle = 1
  // in top-level SConstruct file
  // ==================================================

#ifdef CONFIG_USE_GRACKLE
  PUPable EnzoInitialGrackleTest;
  PUPable EnzoMethodGrackle;
#endif

  PUPable EnzoBoundary;
  PUPable EnzoConfig;
  PUPable EnzoFactory;

  PUPable EnzoInitialImplosion2;
  PUPable EnzoInitialPm;
  PUPable EnzoInitialCollapse;
  PUPable EnzoInitialSedovArray2;
  PUPable EnzoInitialSedovArray3;
  PUPable EnzoInitialSoup;  	  
  PUPable EnzoInitialTurbulence;

  PUPable EnzoRefineShock;

  PUPable EnzoComputePressure;
  PUPable EnzoComputeTemperature;
  PUPable EnzoComputeAcceleration;
  PUPable EnzoComputeCicInterp;

  PUPable EnzoMatrixLaplace;
  PUPable EnzoMatrixDiagonal;
  PUPable EnzoMatrixIdentity;

  PUPable EnzoMethodHeat;
  PUPable EnzoMethodNull;
  PUPable EnzoMethodPpm;
  PUPable EnzoMethodPpml;
  PUPable EnzoMethodPmDeposit;
  PUPable EnzoMethodPmUpdate;
  PUPable EnzoMethodTurbulence;
  PUPable EnzoMethodGravity;
  PUPable EnzoMethodStarMakerCenOstriker;

  PUPable EnzoPhysicsCosmology;

  PUPable EnzoProblem;
  PUPable EnzoProlong;
  PUPable EnzoProlongMC1;
  PUPable EnzoProlongPoisson;

  PUPable EnzoRestrict;

  PUPable EnzoSolverCg;
  PUPable EnzoSolverDiagonal;
  PUPable EnzoSolverBiCgStab;
  PUPable EnzoSolverMg0;
  PUPable EnzoSolverJacobi;

  PUPable EnzoUnits;

  extern module mesh;

  readonly CProxy_EnzoSimulation proxy_enzo_simulation;

  group [migratable] EnzoSimulation : Simulation {

    entry EnzoSimulation (const char filename[n], int n);

    entry void r_startup_begun (CkReductionMsg *);
    entry void r_write_checkpoint ();
  }

  array[Index] EnzoBlock : Block {

    entry EnzoBlock (MsgRefine * mesg);

    entry EnzoBlock();

    // EnzoMethodTurbulence synchronization entry methods
    entry void p_method_turbulence_end(CkReductionMsg *msg);

    // EnzoMethodGravity synchronization entry methods
    entry void r_method_gravity_continue();
    entry void r_method_gravity_end(CkReductionMsg * msg);

    // EnzoSolverCg synchronization entry methods

    entry void r_solver_cg_matvec();

    template <class T>
    entry void r_solver_cg_loop_0a(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_cg_loop_0b(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_cg_shift_1(CkReductionMsg *msg);
    template <class T>
    entry void p_solver_cg_loop_2();
    template <class T>
    entry void r_solver_cg_loop_3(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_cg_loop_5(CkReductionMsg *msg);

    // EnzoSolverBiCGStab post-reduction entry methods

    template <class T>
    entry void r_solver_bicgstab_start_1(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_bicgstab_start_3(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_bicgstab_loop_5(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_bicgstab_loop_11(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_bicgstab_loop_13(CkReductionMsg *msg);
    template <class T>
    entry void r_solver_bicgstab_loop_15(CkReductionMsg *msg);

    entry void p_solver_bicgstab_loop_2();
    entry void p_solver_bicgstab_loop_3();
    entry void p_solver_bicgstab_loop_8();
    entry void p_solver_bicgstab_loop_9();

    // EnzoSolverJacobi

    entry void p_solver_jacobi_continue();

    // EnzoSolverMg0
    
    entry void p_solver_mg0_pre_smooth();
    entry void p_solver_mg0_solve_coarse();
    entry void p_solver_mg0_post_smooth();
    entry void p_solver_mg0_shift_b(CkReductionMsg *msg);
    entry void p_solver_mg0_barrier(CkReductionMsg* msg);  
    entry void p_solver_mg0_prolong_recv(FieldMsg * msg);
    entry void p_solver_mg0_restrict_recv(FieldMsg * msg);

  };

};

module template_defs {
  
   extern module enzo;

   // EnzoSolverCg
   
   extern entry void EnzoBlock r_solver_cg_loop_0a<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_0a<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_0a<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_cg_loop_0b<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_0b<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_0b<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_cg_shift_1<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_shift_1<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_shift_1<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_cg_loop_2<float>();
   extern entry void EnzoBlock r_solver_cg_loop_2<double>();
   extern entry void EnzoBlock r_solver_cg_loop_2<long double>();
   
   extern entry void EnzoBlock r_solver_cg_loop_3<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_3<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_3<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_cg_loop_5<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_5<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_cg_loop_5<long double>(CkReductionMsg *);

   // EnzoSolverBiCgStab
   
   extern entry void EnzoBlock r_solver_bicgstab_start_1<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_start_1<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_start_1<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_bicgstab_start_3<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_start_3<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_start_3<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_bicgstab_loop_5<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_5<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_5<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_bicgstab_loop_11<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_11<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_11<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_bicgstab_loop_13<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_13<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_13<long double>(CkReductionMsg *);

   extern entry void EnzoBlock r_solver_bicgstab_loop_15<float>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_15<double>(CkReductionMsg *);
   extern entry void EnzoBlock r_solver_bicgstab_loop_15<long double>(CkReductionMsg *);
   

};
