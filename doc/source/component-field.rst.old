===============
Field Component
===============

The Field component serves to store and access array data on Blocks of
the AMR hierarchy.  It consists of two classes, `FieldDescr` and
`FieldBlock`.  `FieldDescr` objects are associated with a `Simulation`
object, and are used to store information about fields such as names,
centering, padding, precision, ghost zone depth, etc.  `FieldBlock`
objects are associated with `Block` objects, and are used to store and
access the actual field data.  Each `FieldBlock` has a pointer to its
`FieldDescr` object, and the `FieldDescr` API is mirrored in the
`FieldBlock` class.

`FieldBlock` Class
==================

::

   FieldBlock (FieldDescr, nx, ny, nz)

:Summary:
:Argument: FieldDescr
:Argument: nx,ny,nz

   *The* `FieldBlock` *constructor creates an uninitialized `FieldBlock` object with the given size.*

::

  ~FieldBlock() throw();

:Summary:
:Argument:

::

  FieldBlock(const FieldBlock & field_block) throw ();

:Summary:
:Argument:

   *Copy constructor.*

::

  FieldBlock & operator= (const FieldBlock & field_block) throw ();

:Summary:
:Argument:

   *Assignment operator*


::

  void size(int * nx, int * ny = 0, int * nz = 0) const throw();

:Summary:
:Argument:

   *Return size of fields on the block, assuming centered.*

::

  char * values (int id_field) throw (std::out_of_range);

:Summary:
:Argument:

   *Return array for the corresponding field, which may or may not contain ghosts depending on if they're allocated.*

::

  char * unknowns ( int id_field) throw (std::out_of_range);

:Summary:
:Argument:

   *Return array for the corresponding field, which does not contain ghosts whether they're allocated or not.*

::

  const char * array ()  const throw () 

:Summary:
:Argument:

  *Return raw pointer to the array of all fields.  Const since otherwise dangerous due to varying field sizes, precisions, padding and alignment.*

::

  void cell_width(double xm,   double xp,   double * hx,
		  double ym=0, double yp=0, double * hy=0,
		  double zm=0, double zp=0, double * hz=0) const throw ();

:Summary:
:Argument:

   *Return width of cells along each dimension.*

::

  void clear ( float value = 0.0, 
	       int id_field_first = -1, 
	       int id_field_last  = -1) throw();
 
  *Clear specified array(s) to specified value*

:Summary:
:Argument:

::

  bool array_allocated() const throw()

:Summary:
:Argument:

  *Return whether array is allocated or not.*

::

  size_t array_size() const throw()

:Summary:
:Argument:

  *Return the size of the array containing all fields.*

::

  void allocate_array(bool ghosts_allocated = false) throw();

:Summary:
:Argument:

   *Allocate storage for the field block.*

::

  void reallocate_array(bool ghosts_allocated = false) throw();

:Summary:
:Argument:

   *Reallocate storage for the field block, e.g. when changing from ghosts to non-ghosts*  **costly for large blocks**

::

  void deallocate_array() throw();

:Summary:
:Argument:

  *Deallocate storage for the field block.*

::

  bool ghosts_allocated() const throw ()

  *Return whether ghost cells are allocated or not.*

:Summary:
:Argument:

::

  int field_size (int id_field, int *nx=0, int *ny=0, int *nz=0) const throw();

:Summary:
:Argument:

   *Return the number of elements (nx,ny,nz) along each axis, and total number of bytes n*

::

  void mul (int id_1, int id_2);

:Summary:
:Argument:

  *Multiply FieldBlock 1 by FieldBlock 2*

::

  void div (int id_1, int id_2);

:Summary:
:Argument:

  *Divide FieldBlock 1 by FieldBlock 2*

::

  void scale (int id_1, double scale);

:Summary:
:Argument:

  *Multiply FieldBlock by a constant*

::

  const FieldDescr * field_descr()


:Summary:
:Argument:

   *Return the associated* `FieldDescr`

::

  void print (const char * message,
	      bool use_file = false) const throw();


:Summary:
:Argument:

   *Print basic field characteristics for debugging*

::

  int field_count() const throw() 

:Summary:
:Argument:

  *Return the number of fields*

::

  std::string field_name(size_t id_field) const throw(std::out_of_range)

:Summary:
:Argument:

  *Return name of the ith field.*

::

  bool is_field(const std::string & name) const throw()

:Summary:
:Argument:

   *Return whether the field has been inserted*

::

  int field_id(const std::string & name) const throw()

   *Return the integer handle for the named field*

Properties
----------

:Summary:
:Argument:

::

  int alignment() const throw()

:Summary:
:Argument:

  *Alignment in bytes of fields in memory*

::

  int padding() const throw()

:Summary:
:Argument:

   *padding in bytes between fields in memory.*

::

  double courant() const throw()

:Summary:
:Argument:

   *Courant number for fields*

::

  void centering(int id_field, bool * cx, bool * cy = 0, bool * cz = 0) const 
    throw(std::out_of_range)

:Summary:
:Argument:

   *Centering of given field*

::

  void ghosts(int id_field, int * gx, int * gy = 0, int * gz = 0) const 
    throw(std::out_of_range)

:Summary:
:Argument:

   *depth of ghost zones of given field*

::

  precision_type precision(int id_field) const throw(std::out_of_range)

:Summary:
:Argument:

  *Return precision of given field*

::

  int bytes_per_element(int id_field) const throw()

:Summary:
:Argument:

  *Number of bytes per element required by the given field*

::

  double minimum_value(int id_field) const throw(std::out_of_range)

:Summary:
:Argument:

  *minimum value for the field*

::

  field_action_type minimum_action(int id_field) const
    throw(std::out_of_range)

:Summary:
:Argument:

  *minimum action for the field*

::

  double maximum_value(int id_field) const  throw(std::out_of_range)

:Summary:
:Argument:

  *maximum value for the field*

::

  field_action_type maximum_action(int id_field) const 
    throw(std::out_of_range)

:Summary:
:Argument:

  *maximum action for the field*

