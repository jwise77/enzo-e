Import('env')
Import('parallel_run')
Import('serial_run')
Import('ip_charm')
Import('bin_path')
Import('test_path')

import os

#----------------------------------------------------------------------
SConscript('Balance/SConscript')
#----------------------------------------------------------------------

env['COPY'] = ''
env['CPIN'] = 'touch parameters.out; mv parameters.out ${TARGET}.in'
env['RMIN'] = 'rm -f parameters.out parameters.libconfig'
# env['ASAN_SYMBOLIZER_PATH'] = '/usr/bin/llvm-symbolizer-3.4'
# env['ASAN_OPTIONS'] = 'symbolize=1'


charm_args = os.getenv('CHARM_ARGS','')

# Define a test for running unit tests

date_cmd = 'echo "-------------------"; date +"%Y-%m-%d %H:%M:%S";'
hdf5_to_png  = Builder(action = 'test/cello-h5topng.sh $ARGS; mv *.png test');
copy_bin     = Builder(action = "cp $SOURCE $ARGS");
run_serial   = Builder(action = "$RMIN; echo $TARGET > test/STATUS;" + date_cmd + serial_run   +  "$SOURCE $ARGS> $TARGET 2>&1; $CPIN; $COPY")
run_parallel = Builder(action = "$RMIN; echo $TARGET > test/STATUS;" + date_cmd + parallel_run + " $SOURCE " + charm_args + " $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
make_movie   = Builder(action = "png2swf -r 5 -o $TARGET ${ARGS} ")
png_to_gif   = Builder(action = "convert -delay 5 -loop 0 ${ARGS} $TARGET ")

env.Append(BUILDERS = { 'RunSerial'   : run_serial } ) 
env.Append(BUILDERS = { 'RunParallel' : run_parallel } )
env.Append(BUILDERS = { 'MakeMovie'   : make_movie } )
env.Append(BUILDERS = { 'Hdf5ToPng'   : hdf5_to_png } )
env.Append(BUILDERS = { 'PngToGif'    : png_to_gif } )

env_mv_out  = env.Clone(COPY = 'mv *.png *.h5 Dir_* ' + test_path)
env_mv_test = env.Clone(COPY = 'mv test*out test*in ' + test_path)
env_rm_png  = env.Clone(COPY = 'rm `ls *.png`')


# h5topng

#----------------------------------------------------------------------
# DATA COMPONENT         
#----------------------------------------------------------------------
env.RunSerial('test_Scalar.unit',    bin_path + '/test_Scalar')
env.RunSerial('test_FieldData.unit',bin_path + '/test_FieldData')
env.RunSerial('test_FieldDescr.unit',bin_path + '/test_FieldDescr')
env.RunSerial('test_Field.unit',     bin_path + '/test_Field')
env.RunSerial('test_FieldFace.unit', bin_path + '/test_FieldFace')
env.RunSerial('test_ItIndex.unit',   bin_path + '/test_ItIndex')
env.RunSerial('test_Grouping.unit',  bin_path + '/test_Grouping')
env.RunSerial('test_Particle.unit',      bin_path + '/test_Particle')
#----------------------------------------------------------------------
# DISK COMPONENT          
#----------------------------------------------------------------------
Clean(env.RunSerial
      ('test_FileHdf5.unit',  bin_path + '/test_FileHdf5'),
      '#test_disk.h5')

#----------------------------------------------------------------------
# ENZO COMPONENT          
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ERROR COMPONENT         
#----------------------------------------------------------------------
env.RunSerial('test_Error.unit',       bin_path + '/test_Error')
#----------------------------------------------------------------------
# INITIAL COMPONENT
#----------------------------------------------------------------------
Clean(env_mv_out.RunSerial ('test_initial_music-111.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-111.in'),
      [Glob('#/' + test_path + '/*-111.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-222.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-222.in'),
      [Glob('#/' + test_path + '/*-222.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-444.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-444.in'),
      [Glob('#/' + test_path + '/*-444.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-211.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-211.in'),
      [Glob('#/' + test_path + '/*-211.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-121.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-121.in'),
      [Glob('#/' + test_path + '/*-121.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-112.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-112.in'),
      [Glob('#/' + test_path + '/*-112.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-411.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-411.in'),
      [Glob('#/' + test_path + '/*-411.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-141.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-141.in'),
      [Glob('#/' + test_path + '/*-141.png')])
Clean(env_mv_out.RunSerial ('test_initial_music-114.unit',bin_path + '/enzo-p', 
		ARGS='input/initial_music-114.in'),
      [Glob('#/' + test_path + '/*-114.png')])
#----------------------------------------------------------------------
# IO COMPONENT        
#----------------------------------------------------------------------
env.RunSerial('test_Schedule.unit',     bin_path + '/test_Schedule')
env.RunSerial('test_ItReduce.unit',     bin_path + '/test_ItReduce')
env.RunSerial('test_Colormap.unit',     bin_path + '/test_Colormap')
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MEMORY COMPONENT        
#----------------------------------------------------------------------
env.RunSerial('test_Memory.unit',      bin_path + '/test_Memory')
#----------------------------------------------------------------------
# METHOD COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MESH COMPONENT          
#----------------------------------------------------------------------
env.RunSerial('test_Data.unit',     bin_path + '/test_Data')
env.RunSerial('test_Index.unit',     bin_path + '/test_Index')
Clean(env_mv_out.RunSerial('test_Tree.unit', bin_path + '/test_Tree'),
      ['#/test_Tree.unit.in',
       '#/test_tree_1-initial.png',	
       '#/test_tree_2-balanced.png',
       '#/test_tree_3-merged.png' ])
Clean(env_mv_out.RunSerial('test_TreeDensity.unit',
	      bin_path + '/test_TreeDensity',
              ARGS='input/density_128.h5 Density 0 10'),
      ['#/density_3d_1-initial.png',
       '#/density_x_1-initial.png',
       '#/density_3d_2-balanced.png',
       '#/density_x_2-balanced.png',
       '#/density_3d_3-coalesced.png',
       '#/density_x_3-coalesced.png'])

env.RunSerial('test_ItFace.unit',    bin_path + '/test_ItFace')
env.RunSerial('test_ItChild.unit',   bin_path + '/test_ItChild')

env.RunSerial('test_Node.unit',      bin_path + '/test_Node')
env.RunSerial('test_NodeTrace.unit', bin_path + '/test_NodeTrace')
env.RunSerial('test_ItNode.unit',    bin_path + '/test_ItNode')
#----------------------------------------------------------------------
# MONITOR COMPONENT       
#----------------------------------------------------------------------
env.RunSerial('test_Monitor.unit',      bin_path + '/test_Monitor')
#----------------------------------------------------------------------
# PARAMETERS COMPONENT    
#----------------------------------------------------------------------
Clean(env_mv_test.RunSerial
      ('test_Parameters.unit',  bin_path + '/test_Parameters'),
      ['#/test.in','#/test/test.in','#/test/test1.out','#/test/test2.out'])
#----------------------------------------------------------------------
# PERFORMANCE COMPONENT   
#----------------------------------------------------------------------
env.RunSerial('test_Performance.unit', bin_path + '/test_Performance')
env.RunSerial('test_Papi.unit',        bin_path + '/test_Papi')
env.RunSerial('test_Timer.unit',       bin_path + '/test_Timer')

#----------------------------------------------------------------------
# PORTAL COMPONENT        
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# PROBLEM COMPONENT        
#----------------------------------------------------------------------

env.RunSerial('test_Refresh.unit', bin_path + '/test_Refresh')
env.RunSerial('test_Mask.unit',    bin_path + '/test_Mask')
env.RunSerial('test_Value.unit',   bin_path + '/test_Value')


#----------------------------------------------------------------------
# UNITS COMPONENT        
#----------------------------------------------------------------------

env.RunSerial('test_EnzoUnits.unit',bin_path + '/test_EnzoUnits')

#----------------------------------------------------------------------
# CELLO
#----------------------------------------------------------------------

env.RunSerial('test_Type.unit', bin_path + '/test_Type')

#----------------------------------------------------------------------
# TEST INPUT PARAMETER PARSER
#----------------------------------------------------------------------

env.RunSerial('test_parse_groups.unit',     bin_path + '/test_Parse', ARGS='input/parse_groups.in')
env.RunSerial('test_parse_integer.unit',    bin_path + '/test_Parse', ARGS='input/parse_integer.in')
env.RunSerial('test_parse_list.unit',       bin_path + '/test_Parse', ARGS='input/parse_list.in')
env.RunSerial('test_parse_logical.unit',    bin_path + '/test_Parse', ARGS='input/parse_logical.in')
env.RunSerial('test_parse_scalar.unit',     bin_path + '/test_Parse', ARGS='input/parse_scalar.in')
env.RunSerial('test_parse_include.unit',    bin_path + '/test_Parse', ARGS='input/parse_include.in')
env.RunSerial('test_parse_implosion.unit',  bin_path + '/test_Parse', ARGS='input/test_implosion.in')

#----------------------------------------------------------------------
# TEST PROLONG_LINEAR
#----------------------------------------------------------------------

env.RunSerial('test_prolong_linear.unit',  bin_path + '/test_ProlongLinear')

#----------------------------------------------------------------------
# TEST FULL APPLICATION
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# MethodPpm tests
#----------------------------------------------------------------------

# serial
Clean(env_mv_out.RunSerial ('test_method_ppm-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppm-1.in'),
      [Glob('#/' + test_path + '/method_ppm-1*.png'),
       Glob('#/' + test_path + '/method_ppm-1*.h5')])

env.MakeMovie ("method_ppm-1.swf", "test_method_ppm-1.unit", \
                ARGS= test_path + "/method_ppm-1*.png");
env.PngToGif ("method_ppm-1.gif", "test_method_ppm-1.unit", \
                ARGS= test_path + "/method_ppm-1*.png");


# parallel

Clean(env_mv_out.RunParallel ('test_method_ppm-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppm-8.in'),
      [Glob('#/' + test_path + '/method_ppm-8*.png'),
      Glob('#/' + test_path + '/method_ppm-8*.h5')])

env.MakeMovie ("method_ppm-8.swf", "test_method_ppm-8.unit", \
                ARGS= test_path + "/method_ppm-8-*.png");
env.PngToGif ("method_ppm-8.gif", "test_method_ppm-8.unit", \
                ARGS= test_path + "/method_ppm-8-*.png");

#----------------------------------------------------------------------
# MethodGravity tests
#----------------------------------------------------------------------

# serial
Clean(env_mv_out.RunSerial ('test_method_gravity_cg-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_gravity_cg-1.in'),
      [Glob('#/' + test_path + '/method_gravity_cg-1*.png'),
       Glob('#/' + test_path + '/method_gravity_cg-1*.h5')])

env.MakeMovie ("method_gravity_cg-1.swf", "test_method_gravity_cg-1.unit", \
                ARGS= test_path + "/method_gravity_cg-1*.png");
env.PngToGif ("method_gravity_cg-1.gif", "test_method_gravity_cg-1.unit", \
                ARGS= test_path + "/method_gravity_cg-1*.png");

# parallel

Clean(env_mv_out.RunParallel ('test_method_gravity_cg-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_gravity_cg-8.in'),
      [Glob('#/' + test_path + '/method_gravity_cg-8*.png'),
      Glob('#/' + test_path + '/method_gravity_cg-8*.h5')])

env.MakeMovie ("method_gravity_cg-8.swf", "test_method_gravity_cg-8.unit", \
                ARGS= test_path + "/method_gravity_cg-8-*.png");
env.PngToGif ("method_gravity_cg-8.gif", "test_method_gravity_cg-8.unit", \
                ARGS= test_path + "/method_gravity_cg-8-*.png");

#----------------------------------------------------------------------
# MethodCosmology tests
#----------------------------------------------------------------------

# serial
Clean(env_mv_out.RunSerial ('test_method_cosmology-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_cosmology-1.in'),
      [Glob('#/' + test_path + '/Dir_COSMO-1'),
       Glob('#/' + test_path + '/Dir_COSMO-1')])

#env.MakeMovie ("cosmo-111.swf", "test_method_cosmology-1.unit", \
#                ARGS= test_path + "/cosmo-111*.png");
#env.PngToGif ("cosmo-111.gif", "test_cosmo-111.unit", \
#                ARGS= test_path + "/cosmo-111*.png");


# parallel

Clean(env_mv_out.RunParallel ('test_method_cosmology-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_cosmology-8.in'),
      [Glob('#/' + test_path + '/Dir_COSMO-8'),
      Glob('#/' + test_path + '/Dir_COSMO-8')])

#env.MakeMovie ("cosmo-222.swf", "test_method_cosmology-8.unit", \
#                ARGS= test_path + "/cosmo-222-*.png");
#env.PngToGif ("cosmo-222.gif", "test_method_cosmology-8.unit", \
#                ARGS= test_path + "/cosmo-222-*.png");

#----------------------------------------------------------------------
# MethodHeat tests
#----------------------------------------------------------------------

# serial
Clean(env_mv_out.RunSerial ('test_method_heat-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_heat-1.in'),
      [Glob('#/' + test_path + '/method_heat*-1*.png'),
       Glob('#/' + test_path + '/method_heat*-1*.h5')])

env.MakeMovie ("method_heat-1.swf", "test_method_heat-1.unit", \
                ARGS= test_path + "/method_heat*-1*.png");
env.PngToGif ("method_heat-1.gif", "test_method_heat-1.unit", \
                ARGS= test_path + "/method_heat*-1*.png");

# parallel

Clean(env_mv_out.RunParallel ('test_method_heat-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_heat-8.in'),
      [Glob('#/' + test_path + '/method_heat*-8*.png'),
       Glob('#/' + test_path + '/method_heat*-8*.h5')])

env.MakeMovie ("method_heat-8.swf", "test_method_heat-8.unit", \
                ARGS= test_path + "/method_heat*-8-*.png");
env.PngToGif ("method_heat-8.gif", "test_method_heat-8.unit", \
                ARGS= test_path + "/method_heat*-8-*.png");


#----------------------------------------------------------------------
# serial restart
#----------------------------------------------------------------------

checkpoint_ppm_1 = env_rm_png.RunSerial (
  'test_checkpoint_ppm-1.unit',
  bin_path + '/enzo-p', 
  ARGS='input/checkpoint_ppm-1.in')

restart_ppm_1 = env_mv_out.RunSerial (
   'test_restart_ppm-1.unit',
   bin_path + '/enzo-p',
   ARGS='+restart checkpoint_ppm-1-10')


env.MakeMovie ("restart_ppm-1.swf", "test_restart_ppm-1.unit", \
                  ARGS= test_path + "/checkpoint_ppm-1-*.png");
env.PngToGif ("restart_ppm-1.gif", "test_restart_ppm-1.unit", \
                  ARGS= test_path + "/checkpoint_ppm-1-*.png");

Clean(restart_ppm_1,
      [Glob('#/' + test_path + '/checkpoint_ppm-1*.png')])

env.Requires(restart_ppm_1,checkpoint_ppm_1)

# parallel restart


checkpoint_ppm_8 = env_rm_png.RunParallel (
   'test_checkpoint_ppm-8.unit',
   bin_path + '/enzo-p', 
   ARGS='input/checkpoint_ppm-8.in')

restart_ppm_8 = env_mv_out.RunParallel (
   'test_restart_ppm-8.unit',
   bin_path + '/enzo-p',
   ARGS='+restart checkpoint_ppm-8-10')


env.MakeMovie ("restart_ppm-8.swf", "test_restart_ppm-8.unit", \
                 ARGS= test_path + "/checkpoint_ppm-8-*.png");
env.PngToGif ("restart_ppm-8.gif", "test_restart_ppm-8.unit", \
                 ARGS= test_path + "/checkpoint_ppm-8-*.png");

Clean(restart_ppm_8,
      [Glob('#/' + test_path + '/checkpoint_ppm-8*.png')])

env.Requires(restart_ppm_8,checkpoint_ppm_8)

# MethodPpml tests

Clean(env_mv_out.RunSerial ('test_method_ppml-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppml-1.in'),
      [Glob('#/' + test_path + '/method_ppml-1-?-????-*.png'),
       Glob('#/' + test_path + '/method_ppml-1-??-????-*.h5')])

env.MakeMovie ("method_ppml-1-x.swf", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-x-????.png");
env.PngToGif ("method_ppml-1-x.gif", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-x-????.png");
env.MakeMovie ("method_ppml-1-y.swf", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-y-????.png");
env.PngToGif ("method_ppml-1-y.gif", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-y-????.png");
env.MakeMovie ("method_ppml-1-z.swf", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-z-????.png");
env.PngToGif ("method_ppml-1-z.gif", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-z-????.png");

Clean(env_mv_out.RunParallel ('test_method_ppml-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppml-8.in'),
      [Glob('#/' + test_path + '/method_ppml-8-?-????-*.png'),
       Glob('#/' + test_path + '/method_ppml-8-??-????-*.h5')])

env.MakeMovie ("method_ppml-8-x.swf", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-x-????.png");
env.PngToGif ("method_ppml-8-x.gif", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-x-????.png");
env.MakeMovie ("method_ppml-8-y.swf", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-y-????.png");
env.PngToGif ("method_ppml-8-y.gif", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-y-????.png");
env.MakeMovie ("method_ppml-8-z.swf", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-z-????.png");
env.PngToGif ("method_ppml-8-z.gif", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-z-????.png");

# Updated PPML test using EnzoInitialPpmlTest for multi-nodes

Clean(env_mv_out.RunSerial ('test_method_ppml-test-1.unit',bin_path + '/enzo-p',
                            ARGS='input/method_ppml-test-1.in'),
      [Glob('#/' + test_path + '/PPML1_*')])

Clean(env_mv_out.RunSerial ('test_method_ppml-test-8.unit',bin_path + '/enzo-p',
                            ARGS='input/method_ppml-test-8.in'),
      [Glob('#/' + test_path + '/PPML8_*')])

#----------------------------------------------------------------------
# BOUNDARY CONDITIONS
#----------------------------------------------------------------------

# 2D boundary condition tests

Clean(env_mv_out.RunParallel ('test_boundary_reflecting-2d.unit',
                bin_path + '/enzo-p', 
                ARGS='input/boundary_reflecting-2d.in'),
      [Glob('#/' + test_path + '/boundary_reflecting-2d.png'),
       'test_boundary_reflecting-2d.unit'])

Clean(env_mv_out.RunParallel ('test_boundary_periodic-2d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_periodic-2d.in'),
      [Glob('#/' + test_path + '/boundary_periodic-2d.png'),
       'test_boundary_periodic-2d.unit'])

# Clean(env_mv_out.RunParallel ('test_boundary_inflow-2d.unit',
# 		bin_path + '/enzo-p', 
# 		ARGS='input/boundary_inflow-2d.in'),
#       [Glob('#/' + test_path + '/boundary_inflow-2d.png'),
#        'test_boundary_inflow-2d.unit'])

Clean(env_mv_out.RunParallel ('test_boundary_outflow-2d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_outflow-2d.in'),
      [Glob('#/' + test_path + '/boundary_outflow-2d.png'),
       'test_boundary_outflow-2d.unit'])


env.MakeMovie ("boundary_reflecting-2d.swf", "test_boundary_reflecting-2d.unit", \
                ARGS= test_path + "/boundary_reflecting-2d-????.png");
env.PngToGif ("boundary_reflecting-2d.gif", "test_boundary_reflecting-2d.unit", \
                ARGS= test_path + "/boundary_reflecting-2d-????.png");
env.MakeMovie ("boundary_periodic-2d.swf","test_boundary_periodic-2d.unit", \
                ARGS= test_path + "/boundary_periodic-2d-????.png");
env.PngToGif ("boundary_periodic-2d.gif","test_boundary_periodic-2d.unit", \
                ARGS= test_path + "/boundary_periodic-2d-????.png");
env.MakeMovie ("boundary_outflow-2d.swf","test_boundary_outflow-2d.unit", \
                ARGS= test_path + "/boundary_outflow-2d-????.png");
env.PngToGif ("boundary_outflow-2d.gif","test_boundary_outflow-2d.unit", \
                ARGS= test_path + "/boundary_outflow-2d-????.png");

# 3D boundary condition tests

Clean(env_mv_out.RunParallel ('test_boundary_reflecting-3d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_reflecting-3d.in'),
      [Glob('#/' + test_path + '/boundary_reflecting-3d.png'),
       'test_boundary_reflecting-3d.unit'])

Clean(env_mv_out.RunParallel ('test_boundary_periodic-3d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_periodic-3d.in'),
      [Glob('#/' + test_path + '/boundary_periodic-3d.png'),
       'test_boundary_periodic-3d.unit'])

# Clean(env_mv_out.RunParallel ('test_boundary_inflow-3d.unit',
# 		bin_path + '/enzo-p', 
# 		ARGS='input/boundary_inflow-3d.in'),
#       [Glob('#/' + test_path + '/boundary_inflow-3d.png'),
#        'test_boundary_inflow-3d.unit'])

Clean(env_mv_out.RunParallel ('test_boundary_outflow-3d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_outflow-3d.in'),
      [Glob('#/' + test_path + '/boundary_outflow-3d.png'),
       'test_boundary_outflow-3d.unit'])

env.MakeMovie ("boundary_reflecting-3d.swf","test_boundary_reflecting-3d.unit",
                ARGS= test_path + "/boundary_reflecting-3d-????.png");
env.PngToGif ("boundary_reflecting-3d.gif","test_boundary_reflecting-3d.unit",
                ARGS= test_path + "/boundary_reflecting-3d-????.png");
env.MakeMovie ("boundary_periodic-3d.swf","test_boundary_periodic-3d.unit", \
                ARGS= test_path + "/boundary_periodic-3d-????.png");
env.PngToGif ("boundary_periodic-3d.gif","test_boundary_periodic-3d.unit", \
                ARGS= test_path + "/boundary_periodic-3d-????.png");
# env.MakeMovie ("boundary_inflow-3d.swf","test_boundary_inflow-3d.unit", \
#                 ARGS= test_path + "/boundary_inflow-3d-????.png");
env.MakeMovie ("boundary_outflow-3d.swf","test_boundary_outflow-3d.unit", \
                ARGS= test_path + "/boundary_outflow-3d-????.png");
env.PngToGif ("boundary_outflow-3d.gif","test_boundary_outflow-3d.unit", \
                ARGS= test_path + "/boundary_outflow-3d-????.png");

#----------------------------------------------------------------------
# Mesh generation
#----------------------------------------------------------------------

Clean(env_mv_out.RunSerial ('test_mesh-balanced.unit',bin_path + '/enzo-p', 
		ARGS='input/mesh-balanced.in'),
      [Glob('#/' + test_path + '/mesh-balanced*.png')])

# Clean(env_mv_out.RunSerial ('test_mesh-unbalanced.unit',bin_path + '/enzo-p', 
# 		ARGS='input/mesh-unbalanced.in'),
#       [Glob('#/' + test_path + '/mesh-unbalanced*.png')])

#----------------------------------------------------------------------
# AMR PPM
#----------------------------------------------------------------------


# serial

# Clean(env_mv_out.RunParallel ('test_adapt-L1-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L1-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L1-P1*.png')])
# env.MakeMovie ("adapt-L1-P1-mesh.swf", "test_adapt-L1-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L1-P1-mesh-*.png");
# env.MakeMovie ("adapt-L1-P1-density.swf", "test_adapt-L1-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L1-P1-density-*.png");
# 
# Clean(env_mv_out.RunParallel ('test_adapt-L2-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L2-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L2-P1*.png')])
# env.MakeMovie ("adapt-L2-P1-mesh.swf", "test_adapt-L2-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L2-P1-mesh-*.png");
# env.MakeMovie ("adapt-L2-P1-density.swf", "test_adapt-L2-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L2-P1-density-*.png");
# 
# Clean(env_mv_out.RunParallel ('test_adapt-L3-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L3-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L3-P1*.png')])
# env.MakeMovie ("adapt-L3-P1-mesh.swf", "test_adapt-L3-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L3-P1-mesh-*.png");
# env.MakeMovie ("adapt-L3-P1-density.swf", "test_adapt-L3-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L3-P1-density-*.png");
# 
# Clean(env_mv_out.RunParallel ('test_adapt-L4-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L4-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L4-P1*.png')])
# env.MakeMovie ("adapt-L4-P1-mesh.swf", "test_adapt-L4-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L4-P1-mesh-*.png");
# env.MakeMovie ("adapt-L4-P1-density.swf", "test_adapt-L4-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L4-P1-density-*.png");

Clean(env_mv_out.RunParallel ('test_adapt-L5-P1.unit',bin_path + '/enzo-p', 
		ARGS='input/adapt-L5-P1.in'),
      [Glob('#/' + test_path + '/adapt-L5-P1*.png')])
env.MakeMovie ("adapt-L5-P1-mesh.swf", "test_adapt-L5-P1.unit", \
                ARGS= test_path + "/adapt-L5-P1-mesh-*.png");
env.PngToGif ("adapt-L5-P1-mesh.gif", "test_adapt-L5-P1.unit", \
                ARGS= test_path + "/adapt-L5-P1-mesh-*.png");
env.MakeMovie ("adapt-L5-P1-density.swf", "test_adapt-L5-P1.unit", \
                ARGS= test_path + "/adapt-L5-P1-density-*.png");
env.PngToGif ("adapt-L5-P1-density.gif", "test_adapt-L5-P1.unit", \
                ARGS= test_path + "/adapt-L5-P1-density-*.png");



#----------------------------------------------------------------------
# PERFORMANCE
#----------------------------------------------------------------------

# env.RunParallel ('test_performance-papi.unit',
#                 bin_path + '/enzo-p', 
#                 ARGS='input/performance-papi.in')


Clean(env_mv_out.RunParallel ('test_initial_png.unit',
		bin_path + '/enzo-p', 
		ARGS='input/initial_png.in'),
      [Glob('#/' + test_path + '/initial_png.png'),
       'test_initial_png.unit'])
env.MakeMovie ("initial_png.swf","test_initial_png.unit", \
                ARGS= test_path + "/initial_png-??.png");
env.PngToGif ("initial_png.gif","test_initial_png.unit", \
                ARGS= test_path + "/initial_png-??.png");


#----------------------------------------------------------------------
# PROBLEM
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# OUTPUT
#----------------------------------------------------------------------

output_stride_1_RUN = env.RunParallel (
   'test_output-stride-1.unit',
   bin_path + '/enzo-p', 
   ARGS='input/output-stride-1.in')

output_stride_1_C00 = env_mv_out.Hdf5ToPng (
   'test_output-stride-1-C00.unit',
   'test_output-stride-1.unit',
   ARGS='output-stride-1 00');

output_stride_1_C10 = env_mv_out.Hdf5ToPng (
   'test_output-stride-1-C10.unit',
   'test_output-stride-1-C00.unit',
   ARGS='output-stride-1 10');

output_stride_1 = env_mv_out.Hdf5ToPng (
   'test_output-stride-1-H5.unit',
   'test_output-stride-1-C10.unit',
   ARGS='output-stride-1 20');

env.Requires(output_stride_1,    output_stride_1_C10)
env.Requires(output_stride_1_C10,output_stride_1_C00)
env.Requires(output_stride_1_C00,output_stride_1_RUN)

Clean(output_stride_1,
      [Glob('#/' + test_path + '/output-stride-1*.png'),
       'test_output-stride-1.unit'])

#----------------------------------------------------------------------

output_stride_2_RUN = env.RunParallel (
   'test_output-stride-2.unit',
   bin_path + '/enzo-p', 
   ARGS='input/output-stride-2.in')

output_stride_2_C00 = env_mv_out.Hdf5ToPng (
   'test_output-stride-2-C00.unit',
   'test_output-stride-2.unit',
   ARGS='output-stride-2 00');

output_stride_2_C10 = env_mv_out.Hdf5ToPng (
   'test_output-stride-2-C10.unit',
   'test_output-stride-2-C00.unit',
   ARGS='output-stride-2 10');

output_stride_2 = env_mv_out.Hdf5ToPng (
   'test_output-stride-2-H5.unit',
   'test_output-stride-2-C10.unit',
   ARGS='output-stride-2 20');

env.Requires(output_stride_2,    output_stride_2_C10)
env.Requires(output_stride_2_C10,output_stride_2_C00)
env.Requires(output_stride_2_C00,output_stride_2_RUN)

Clean(output_stride_2,
      [Glob('#/' + test_path + '/output-stride-2*.png'),
       'test_output-stride-2.unit'])

#----------------------------------------------------------------------

output_stride_4_RUN = env.RunParallel (
   'test_output-stride-4.unit',
   bin_path + '/enzo-p', 
   ARGS='input/output-stride-4.in')

output_stride_4_C00 = env_mv_out.Hdf5ToPng (
   'test_output-stride-4-C00.unit',
   'test_output-stride-4.unit',
   ARGS='output-stride-4 00');

output_stride_4_C10 = env_mv_out.Hdf5ToPng (
   'test_output-stride-4-C10.unit',
   'test_output-stride-4-C00.unit',
   ARGS='output-stride-4 10');

output_stride_4 = env_mv_out.Hdf5ToPng (
   'test_output-stride-4-H5.unit',
   'test_output-stride-4-C10.unit',
   ARGS='output-stride-4 20');

env.Requires(output_stride_4,    output_stride_4_C10)
env.Requires(output_stride_4_C10,output_stride_4_C00)
env.Requires(output_stride_4_C00,output_stride_4_RUN)

Clean(output_stride_4,
      [Glob('#/' + test_path + '/output-stride-4*.png'),
       'test_output-stride-4.unit'])

#----------------------------------------------------------------------

Clean(env_mv_out.RunParallel ('test_output-headers.unit',
                bin_path + '/enzo-p', 
                ARGS='input/output-headers.in'),
		[Glob('#/' + test_path + '/Dir_*')])

#----------------------------------------------------------------------
# PARTICLES
#----------------------------------------------------------------------
Clean(env_mv_out.RunParallel ('test_particle-x.unit',
                bin_path + '/enzo-p', 
                ARGS='input/test_particle-x.in'),
		[Glob('#/' + test_path + '/particle-x.png')])

env.PngToGif("particle-x.gif", "test_particle-x.unit", \
             ARGS = test_path + "/particle-x*.png")			       


Clean(env_mv_out.RunParallel ('test_particle-y.unit',
                bin_path + '/enzo-p', 
                ARGS='input/test_particle-y.in'),
		[Glob('#/' + test_path + '/particle-y.png')])

env.PngToGif("particle-y.gif", "test_particle-y.unit", \
             ARGS = test_path + "/particle-y*.png")			       

Clean(env_mv_out.RunParallel ('test_particle-xy.unit',
                bin_path + '/enzo-p', 
                ARGS='input/test_particle-xy.in'),
		[Glob('#/' + test_path + '/particle-xy.png')])
env.PngToGif("particle-xy.gif", "test_particle-xy.unit", \
             ARGS = test_path + "/particle-xy*.png")			       

Clean(env_mv_out.RunParallel ('test_particle-circle.unit',
                bin_path + '/enzo-p', 
                ARGS='input/test_particle-circle.in'),
		[Glob('#/' + test_path + '/particle-circle.png')])
env.PngToGif("particle-circle.gif", "test_particle-circle.unit", \
             ARGS = test_path + "/particle-circle*.png")

Clean(env_mv_out.RunParallel ('test_particle-amr-static.unit',
                bin_path + '/enzo-p', 
                ARGS='input/test_particle-amr-static.in'),
		[Glob('#/' + test_path + '/particle-amr-static.png')])
env.PngToGif("particle-amr-static.gif", "test_particle-amr-static.unit", \
             ARGS = test_path + "/particle-amr-static*.png")

Clean(env_mv_out.RunParallel ('test_particle-amr-dynamic.unit',
                bin_path + '/enzo-p', 
                ARGS='input/test_particle-amr-dynamic.in'),
		[Glob('#/' + test_path + '/particle-amr-dynamic.png')])
env.PngToGif("particle-amr-dynamic.gif", "test_particle-amr-dynamic.unit", \
             ARGS = test_path + "/particle-amr-dynamic*.png")

#----------------------------------------------------------------------

# Prevent concurrent running of parallel jobs

SideEffect('log.txt', 
     [ 'method_ppm-1.unit',
       'method_ppm-8.unit'])

env.Clean('.',Glob('test_*.in'))
env.Clean('.',Glob('*/test_*.in'))
